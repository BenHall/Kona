#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kona.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Kona")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Kona.Linq.Model.Address instance);
    partial void UpdateAddress(Kona.Linq.Model.Address instance);
    partial void DeleteAddress(Kona.Linq.Model.Address instance);
    partial void InsertTransaction(Kona.Linq.Model.Transaction instance);
    partial void UpdateTransaction(Kona.Linq.Model.Transaction instance);
    partial void DeleteTransaction(Kona.Linq.Model.Transaction instance);
    partial void InsertCartItem(Kona.Linq.Model.CartItem instance);
    partial void UpdateCartItem(Kona.Linq.Model.CartItem instance);
    partial void DeleteCartItem(Kona.Linq.Model.CartItem instance);
    partial void InsertCategory(Kona.Linq.Model.Category instance);
    partial void UpdateCategory(Kona.Linq.Model.Category instance);
    partial void DeleteCategory(Kona.Linq.Model.Category instance);
    partial void InsertCategories_Product(Kona.Linq.Model.Categories_Product instance);
    partial void UpdateCategories_Product(Kona.Linq.Model.Categories_Product instance);
    partial void DeleteCategories_Product(Kona.Linq.Model.Categories_Product instance);
    partial void InsertCustomerBehavior(Kona.Linq.Model.CustomerBehavior instance);
    partial void UpdateCustomerBehavior(Kona.Linq.Model.CustomerBehavior instance);
    partial void DeleteCustomerBehavior(Kona.Linq.Model.CustomerBehavior instance);
    partial void InsertCustomerEvent(Kona.Linq.Model.CustomerEvent instance);
    partial void UpdateCustomerEvent(Kona.Linq.Model.CustomerEvent instance);
    partial void DeleteCustomerEvent(Kona.Linq.Model.CustomerEvent instance);
    partial void InsertCustomer(Kona.Linq.Model.Customer instance);
    partial void UpdateCustomer(Kona.Linq.Model.Customer instance);
    partial void DeleteCustomer(Kona.Linq.Model.Customer instance);
    partial void InsertDeliveryMethod(Kona.Linq.Model.DeliveryMethod instance);
    partial void UpdateDeliveryMethod(Kona.Linq.Model.DeliveryMethod instance);
    partial void DeleteDeliveryMethod(Kona.Linq.Model.DeliveryMethod instance);
    partial void InsertInventoryRecord(Kona.Linq.Model.InventoryRecord instance);
    partial void UpdateInventoryRecord(Kona.Linq.Model.InventoryRecord instance);
    partial void DeleteInventoryRecord(Kona.Linq.Model.InventoryRecord instance);
    partial void InsertInventoryStatus(Kona.Linq.Model.InventoryStatus instance);
    partial void UpdateInventoryStatus(Kona.Linq.Model.InventoryStatus instance);
    partial void DeleteInventoryStatus(Kona.Linq.Model.InventoryStatus instance);
    partial void InsertOrderItem(Kona.Linq.Model.OrderItem instance);
    partial void UpdateOrderItem(Kona.Linq.Model.OrderItem instance);
    partial void DeleteOrderItem(Kona.Linq.Model.OrderItem instance);
    partial void InsertOrder(Kona.Linq.Model.Order instance);
    partial void UpdateOrder(Kona.Linq.Model.Order instance);
    partial void DeleteOrder(Kona.Linq.Model.Order instance);
    partial void InsertOrderStatus(Kona.Linq.Model.OrderStatus instance);
    partial void UpdateOrderStatus(Kona.Linq.Model.OrderStatus instance);
    partial void DeleteOrderStatus(Kona.Linq.Model.OrderStatus instance);
    partial void InsertProductDescriptor(Kona.Linq.Model.ProductDescriptor instance);
    partial void UpdateProductDescriptor(Kona.Linq.Model.ProductDescriptor instance);
    partial void DeleteProductDescriptor(Kona.Linq.Model.ProductDescriptor instance);
    partial void InsertProductImage(Kona.Linq.Model.ProductImage instance);
    partial void UpdateProductImage(Kona.Linq.Model.ProductImage instance);
    partial void DeleteProductImage(Kona.Linq.Model.ProductImage instance);
    partial void InsertProduct(Kona.Linq.Model.Product instance);
    partial void UpdateProduct(Kona.Linq.Model.Product instance);
    partial void DeleteProduct(Kona.Linq.Model.Product instance);
    partial void InsertProducts_CrossSell(Kona.Linq.Model.Products_CrossSell instance);
    partial void UpdateProducts_CrossSell(Kona.Linq.Model.Products_CrossSell instance);
    partial void DeleteProducts_CrossSell(Kona.Linq.Model.Products_CrossSell instance);
    partial void InsertProducts_Related(Kona.Linq.Model.Products_Related instance);
    partial void UpdateProducts_Related(Kona.Linq.Model.Products_Related instance);
    partial void DeleteProducts_Related(Kona.Linq.Model.Products_Related instance);
    partial void InsertShippingMethod(Kona.Linq.Model.ShippingMethod instance);
    partial void UpdateShippingMethod(Kona.Linq.Model.ShippingMethod instance);
    partial void DeleteShippingMethod(Kona.Linq.Model.ShippingMethod instance);
    partial void InsertTaxRate(Kona.Linq.Model.TaxRate instance);
    partial void UpdateTaxRate(Kona.Linq.Model.TaxRate instance);
    partial void DeleteTaxRate(Kona.Linq.Model.TaxRate instance);
    #endregion
		
		public DB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KonaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Address> Addresses
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Address>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Transaction> Transactions
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.CartItem> CartItems
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.CartItem>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Category> Categories
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Category>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Categories_Product> Categories_Products
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Categories_Product>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.CustomerBehavior> CustomerBehaviors
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.CustomerBehavior>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.CustomerEvent> CustomerEvents
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.CustomerEvent>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Customer> Customers
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Customer>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.DeliveryMethod> DeliveryMethods
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.DeliveryMethod>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.InventoryRecord> InventoryRecords
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.InventoryRecord>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.InventoryStatus> InventoryStatus
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.InventoryStatus>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.OrderItem> OrderItems
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.OrderItem>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Order> Orders
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Order>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.ProductDescriptor> ProductDescriptors
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.ProductDescriptor>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Product> Products
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Product>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Products_CrossSell> Products_CrossSells
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Products_CrossSell>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.Products_Related> Products_Relateds
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.Products_Related>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.ShippingMethod> ShippingMethods
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.ShippingMethod>();
			}
		}
		
		public System.Data.Linq.Table<Kona.Linq.Model.TaxRate> TaxRates
		{
			get
			{
				return this.GetTable<Kona.Linq.Model.TaxRate>();
			}
		}
	}
}
namespace Kona.Linq.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private string _StateOrProvince;
		
		private string _Zip;
		
		private string _Country;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private bool _IsDefault;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateOrProvinceChanging(string value);
    partial void OnStateOrProvinceChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public Address()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			OnCreated();
		}
		
		[Column(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Street1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[Column(Storage="_Street2", DbType="NVarChar(50)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_StateOrProvince", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StateOrProvince
		{
			get
			{
				return this._StateOrProvince;
			}
			set
			{
				if ((this._StateOrProvince != value))
				{
					this.OnStateOrProvinceChanging(value);
					this.SendPropertyChanging();
					this._StateOrProvince = value;
					this.SendPropertyChanged("StateOrProvince");
					this.OnStateOrProvinceChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="NVarChar(50)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="NVarChar(50)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Association(Name="Address_Order", Storage="_Orders", ThisKey="AddressID", OtherKey="ShippingAddressID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Address_Order1", Storage="_Orders1", ThisKey="AddressID", OtherKey="BillingAddressID")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address1 = null;
		}
	}
	
	[Table(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TransactionID;
		
		private System.Guid _OrderID;
		
		private System.DateTime _TransactionDate;
		
		private decimal _Amount;
		
		private string _AuthorizationCode;
		
		private string _Notes;
		
		private string _Processor;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(System.Guid value);
    partial void OnTransactionIDChanged();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAuthorizationCodeChanging(string value);
    partial void OnAuthorizationCodeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnProcessorChanging(string value);
    partial void OnProcessorChanged();
    #endregion
		
		public Transaction()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_TransactionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationCode", DbType="NVarChar(50)")]
		public string AuthorizationCode
		{
			get
			{
				return this._AuthorizationCode;
			}
			set
			{
				if ((this._AuthorizationCode != value))
				{
					this.OnAuthorizationCodeChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationCode = value;
					this.SendPropertyChanged("AuthorizationCode");
					this.OnAuthorizationCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(50)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Processor", DbType="NVarChar(50)")]
		public string Processor
		{
			get
			{
				return this._Processor;
			}
			set
			{
				if ((this._Processor != value))
				{
					this.OnProcessorChanging(value);
					this.SendPropertyChanging();
					this._Processor = value;
					this.SendPropertyChanged("Processor");
					this.OnProcessorChanged();
				}
			}
		}
		
		[Association(Name="Order_Transaction", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CartItems")]
	public partial class CartItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SKU;
		
		private string _UserName;
		
		private int _Quantity;
		
		private System.DateTime _DateAdded;
		
		private decimal _DiscountAmount;
		
		private string _DiscountReason;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDiscountAmountChanging(decimal value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountReasonChanging(string value);
    partial void OnDiscountReasonChanged();
    #endregion
		
		public CartItem()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Decimal(18,0) NOT NULL")]
		public decimal DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountReason", DbType="NVarChar(255)")]
		public string DiscountReason
		{
			get
			{
				return this._DiscountReason;
			}
			set
			{
				if ((this._DiscountReason != value))
				{
					this.OnDiscountReasonChanging(value);
					this.SendPropertyChanging();
					this._DiscountReason = value;
					this.SendPropertyChanged("DiscountReason");
					this.OnDiscountReasonChanged();
				}
			}
		}
		
		[Association(Name="Customer_CartItem", Storage="_Customer", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CartItems.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CartItems.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Product_CartItem", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CartItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CartItems.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _ParentID;
		
		private bool _IsDefault;
		
		private string _DefaultImageFile;
		
		private EntitySet<Categories_Product> _Categories_Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnDefaultImageFileChanging(string value);
    partial void OnDefaultImageFileChanged();
    #endregion
		
		public Category()
		{
			this._Categories_Products = new EntitySet<Categories_Product>(new Action<Categories_Product>(this.attach_Categories_Products), new Action<Categories_Product>(this.detach_Categories_Products));
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultImageFile", DbType="NVarChar(255)")]
		public string DefaultImageFile
		{
			get
			{
				return this._DefaultImageFile;
			}
			set
			{
				if ((this._DefaultImageFile != value))
				{
					this.OnDefaultImageFileChanging(value);
					this.SendPropertyChanging();
					this._DefaultImageFile = value;
					this.SendPropertyChanged("DefaultImageFile");
					this.OnDefaultImageFileChanged();
				}
			}
		}
		
		[Association(Name="Category_Categories_Product", Storage="_Categories_Products", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Categories_Product> Categories_Products
		{
			get
			{
				return this._Categories_Products;
			}
			set
			{
				this._Categories_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Categories_Products")]
	public partial class Categories_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _SKU;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    #endregion
		
		public Categories_Product()
		{
			this._Category = default(EntityRef<Category>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Association(Name="Category_Categories_Product", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Categories_Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Categories_Products.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Product_Categories_Product", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Categories_Products.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Categories_Products.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomerBehaviors")]
	public partial class CustomerBehavior : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserBehaviorID;
		
		private string _Description;
		
		private EntitySet<CustomerEvent> _CustomerEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserBehaviorIDChanging(int value);
    partial void OnUserBehaviorIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CustomerBehavior()
		{
			this._CustomerEvents = new EntitySet<CustomerEvent>(new Action<CustomerEvent>(this.attach_CustomerEvents), new Action<CustomerEvent>(this.detach_CustomerEvents));
			OnCreated();
		}
		
		[Column(Storage="_UserBehaviorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserBehaviorID
		{
			get
			{
				return this._UserBehaviorID;
			}
			set
			{
				if ((this._UserBehaviorID != value))
				{
					this.OnUserBehaviorIDChanging(value);
					this.SendPropertyChanging();
					this._UserBehaviorID = value;
					this.SendPropertyChanged("UserBehaviorID");
					this.OnUserBehaviorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="CustomerBehavior_CustomerEvent", Storage="_CustomerEvents", ThisKey="UserBehaviorID", OtherKey="UserBehaviorID")]
		public EntitySet<CustomerEvent> CustomerEvents
		{
			get
			{
				return this._CustomerEvents;
			}
			set
			{
				this._CustomerEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerEvents(CustomerEvent entity)
		{
			this.SendPropertyChanging();
			entity.CustomerBehavior = this;
		}
		
		private void detach_CustomerEvents(CustomerEvent entity)
		{
			this.SendPropertyChanging();
			entity.CustomerBehavior = null;
		}
	}
	
	[Table(Name="dbo.CustomerEvents")]
	public partial class CustomerEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _UserBehaviorID;
		
		private string _UserName;
		
		private System.DateTime _EventDate;
		
		private string _IP;
		
		private string _SKU;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<System.Guid> _OrderID;
		
		private EntityRef<CustomerBehavior> _CustomerBehavior;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnUserBehaviorIDChanging(int value);
    partial void OnUserBehaviorIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnOrderIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderIDChanged();
    #endregion
		
		public CustomerEvent()
		{
			this._CustomerBehavior = default(EntityRef<CustomerBehavior>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserBehaviorID", DbType="Int NOT NULL")]
		public int UserBehaviorID
		{
			get
			{
				return this._UserBehaviorID;
			}
			set
			{
				if ((this._UserBehaviorID != value))
				{
					if (this._CustomerBehavior.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserBehaviorIDChanging(value);
					this.SendPropertyChanging();
					this._UserBehaviorID = value;
					this.SendPropertyChanged("UserBehaviorID");
					this.OnUserBehaviorIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_EventDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Association(Name="CustomerBehavior_CustomerEvent", Storage="_CustomerBehavior", ThisKey="UserBehaviorID", OtherKey="UserBehaviorID", IsForeignKey=true)]
		public CustomerBehavior CustomerBehavior
		{
			get
			{
				return this._CustomerBehavior.Entity;
			}
			set
			{
				CustomerBehavior previousValue = this._CustomerBehavior.Entity;
				if (((previousValue != value) 
							|| (this._CustomerBehavior.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerBehavior.Entity = null;
						previousValue.CustomerEvents.Remove(this);
					}
					this._CustomerBehavior.Entity = value;
					if ((value != null))
					{
						value.CustomerEvents.Add(this);
						this._UserBehaviorID = value.UserBehaviorID;
					}
					else
					{
						this._UserBehaviorID = default(int);
					}
					this.SendPropertyChanged("CustomerBehavior");
				}
			}
		}
		
		[Association(Name="Customer_CustomerEvent", Storage="_Customer", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerEvents.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerEvents.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Email;
		
		private string _First;
		
		private string _Last;
		
		private string _LanguageCode;
		
		private EntitySet<CartItem> _CartItems;
		
		private EntitySet<CustomerEvent> _CustomerEvents;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstChanging(string value);
    partial void OnFirstChanged();
    partial void OnLastChanging(string value);
    partial void OnLastChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public Customer()
		{
			this._CartItems = new EntitySet<CartItem>(new Action<CartItem>(this.attach_CartItems), new Action<CartItem>(this.detach_CartItems));
			this._CustomerEvents = new EntitySet<CustomerEvent>(new Action<CustomerEvent>(this.attach_CustomerEvents), new Action<CustomerEvent>(this.detach_CustomerEvents));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_First", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string First
		{
			get
			{
				return this._First;
			}
			set
			{
				if ((this._First != value))
				{
					this.OnFirstChanging(value);
					this.SendPropertyChanging();
					this._First = value;
					this.SendPropertyChanged("First");
					this.OnFirstChanged();
				}
			}
		}
		
		[Column(Storage="_Last", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Last
		{
			get
			{
				return this._Last;
			}
			set
			{
				if ((this._Last != value))
				{
					this.OnLastChanging(value);
					this.SendPropertyChanging();
					this._Last = value;
					this.SendPropertyChanged("Last");
					this.OnLastChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="Char(2)")]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="Customer_CartItem", Storage="_CartItems", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<CartItem> CartItems
		{
			get
			{
				return this._CartItems;
			}
			set
			{
				this._CartItems.Assign(value);
			}
		}
		
		[Association(Name="Customer_CustomerEvent", Storage="_CustomerEvents", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<CustomerEvent> CustomerEvents
		{
			get
			{
				return this._CustomerEvents;
			}
			set
			{
				this._CustomerEvents.Assign(value);
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Orders", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CartItems(CartItem entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CartItems(CartItem entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerEvents(CustomerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerEvents(CustomerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.DeliveryMethod")]
	public partial class DeliveryMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeliveryMethodID;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeliveryMethodIDChanging(int value);
    partial void OnDeliveryMethodIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DeliveryMethod()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_DeliveryMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeliveryMethodID
		{
			get
			{
				return this._DeliveryMethodID;
			}
			set
			{
				if ((this._DeliveryMethodID != value))
				{
					this.OnDeliveryMethodIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryMethodID = value;
					this.SendPropertyChanged("DeliveryMethodID");
					this.OnDeliveryMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="DeliveryMethod_Product", Storage="_Products", ThisKey="DeliveryMethodID", OtherKey="DeliveryMethodID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryMethod = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryMethod = null;
		}
	}
	
	[Table(Name="dbo.InventoryRecords")]
	public partial class InventoryRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryRecordID;
		
		private string _SKU;
		
		private int _Increment;
		
		private System.DateTime _DateEntered;
		
		private string _Notes;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryRecordIDChanging(int value);
    partial void OnInventoryRecordIDChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnIncrementChanging(int value);
    partial void OnIncrementChanged();
    partial void OnDateEnteredChanging(System.DateTime value);
    partial void OnDateEnteredChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public InventoryRecord()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_InventoryRecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryRecordID
		{
			get
			{
				return this._InventoryRecordID;
			}
			set
			{
				if ((this._InventoryRecordID != value))
				{
					this.OnInventoryRecordIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryRecordID = value;
					this.SendPropertyChanged("InventoryRecordID");
					this.OnInventoryRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_Increment", DbType="Int NOT NULL")]
		public int Increment
		{
			get
			{
				return this._Increment;
			}
			set
			{
				if ((this._Increment != value))
				{
					this.OnIncrementChanging(value);
					this.SendPropertyChanging();
					this._Increment = value;
					this.SendPropertyChanged("Increment");
					this.OnIncrementChanged();
				}
			}
		}
		
		[Column(Storage="_DateEntered", DbType="DateTime NOT NULL")]
		public System.DateTime DateEntered
		{
			get
			{
				return this._DateEntered;
			}
			set
			{
				if ((this._DateEntered != value))
				{
					this.OnDateEnteredChanging(value);
					this.SendPropertyChanging();
					this._DateEntered = value;
					this.SendPropertyChanged("DateEntered");
					this.OnDateEnteredChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(500)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Product_InventoryRecord", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InventoryRecords.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InventoryRecords.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InventoryStatus")]
	public partial class InventoryStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryStatusID;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryStatusIDChanging(int value);
    partial void OnInventoryStatusIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public InventoryStatus()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_InventoryStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryStatusID
		{
			get
			{
				return this._InventoryStatusID;
			}
			set
			{
				if ((this._InventoryStatusID != value))
				{
					this.OnInventoryStatusIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryStatusID = value;
					this.SendPropertyChanged("InventoryStatusID");
					this.OnInventoryStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="InventoryStatus_Product", Storage="_Products", ThisKey="InventoryStatusID", OtherKey="InventoryStatusID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InventoryStatus = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InventoryStatus = null;
		}
	}
	
	[Table(Name="dbo.OrderItems")]
	public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderID;
		
		private string _SKU;
		
		private int _Quantity;
		
		private System.DateTime _DateAdded;
		
		private decimal _LineItemPrice;
		
		private decimal _Discount;
		
		private string _DiscountReason;
		
		private System.Data.Linq.Binary _Version;
		
		private decimal _LineItemWeightInPounds;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnLineItemPriceChanging(decimal value);
    partial void OnLineItemPriceChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnDiscountReasonChanging(string value);
    partial void OnDiscountReasonChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnLineItemWeightInPoundsChanging(decimal value);
    partial void OnLineItemWeightInPoundsChanged();
    #endregion
		
		public OrderItem()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_LineItemPrice", DbType="Decimal(18,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LineItemPrice
		{
			get
			{
				return this._LineItemPrice;
			}
			set
			{
				if ((this._LineItemPrice != value))
				{
					this.OnLineItemPriceChanging(value);
					this.SendPropertyChanging();
					this._LineItemPrice = value;
					this.SendPropertyChanged("LineItemPrice");
					this.OnLineItemPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(18,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountReason", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DiscountReason
		{
			get
			{
				return this._DiscountReason;
			}
			set
			{
				if ((this._DiscountReason != value))
				{
					this.OnDiscountReasonChanging(value);
					this.SendPropertyChanging();
					this._DiscountReason = value;
					this.SendPropertyChanged("DiscountReason");
					this.OnDiscountReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_LineItemWeightInPounds", DbType="Decimal(18,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LineItemWeightInPounds
		{
			get
			{
				return this._LineItemWeightInPounds;
			}
			set
			{
				if ((this._LineItemWeightInPounds != value))
				{
					this.OnLineItemWeightInPoundsChanging(value);
					this.SendPropertyChanging();
					this._LineItemWeightInPounds = value;
					this.SendPropertyChanged("LineItemWeightInPounds");
					this.OnLineItemWeightInPoundsChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderItem", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="Product_OrderItem", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderID;
		
		private string _OrderNumber;
		
		private string _UserName;
		
		private string _UserLanguageCode;
		
		private decimal _TaxAmount;
		
		private string _ShippingService;
		
		private decimal _ShippingAmount;
		
		private decimal _DiscountAmount;
		
		private string _DiscountReason;
		
		private System.Nullable<int> _ShippingAddressID;
		
		private System.Nullable<int> _BillingAddressID;
		
		private System.Nullable<System.DateTime> _DateShipped;
		
		private string _TrackingNumber;
		
		private System.Nullable<System.DateTime> _EstimatedDelivery;
		
		private decimal _SubTotal;
		
		private int _OrderStatusID;
		
		private System.DateTime _CreatedOn;
		
		private System.Nullable<System.DateTime> _ExecutedOn;
		
		private System.DateTime _ModifiedOn;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Address> _Address1;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnOrderNumberChanging(string value);
    partial void OnOrderNumberChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserLanguageCodeChanging(string value);
    partial void OnUserLanguageCodeChanged();
    partial void OnTaxAmountChanging(decimal value);
    partial void OnTaxAmountChanged();
    partial void OnShippingServiceChanging(string value);
    partial void OnShippingServiceChanged();
    partial void OnShippingAmountChanging(decimal value);
    partial void OnShippingAmountChanged();
    partial void OnDiscountAmountChanging(decimal value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountReasonChanging(string value);
    partial void OnDiscountReasonChanged();
    partial void OnShippingAddressIDChanging(System.Nullable<int> value);
    partial void OnShippingAddressIDChanged();
    partial void OnBillingAddressIDChanging(System.Nullable<int> value);
    partial void OnBillingAddressIDChanged();
    partial void OnDateShippedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateShippedChanged();
    partial void OnTrackingNumberChanging(string value);
    partial void OnTrackingNumberChanged();
    partial void OnEstimatedDeliveryChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedDeliveryChanged();
    partial void OnSubTotalChanging(decimal value);
    partial void OnSubTotalChanged();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnExecutedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutedOnChanged();
    partial void OnModifiedOnChanging(System.DateTime value);
    partial void OnModifiedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Order()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Address = default(EntityRef<Address>);
			this._Address1 = default(EntityRef<Address>);
			this._Customer = default(EntityRef<Customer>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNumber", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserLanguageCode", DbType="Char(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserLanguageCode
		{
			get
			{
				return this._UserLanguageCode;
			}
			set
			{
				if ((this._UserLanguageCode != value))
				{
					this.OnUserLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._UserLanguageCode = value;
					this.SendPropertyChanged("UserLanguageCode");
					this.OnUserLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TaxAmount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal TaxAmount
		{
			get
			{
				return this._TaxAmount;
			}
			set
			{
				if ((this._TaxAmount != value))
				{
					this.OnTaxAmountChanging(value);
					this.SendPropertyChanging();
					this._TaxAmount = value;
					this.SendPropertyChanged("TaxAmount");
					this.OnTaxAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingService", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingService
		{
			get
			{
				return this._ShippingService;
			}
			set
			{
				if ((this._ShippingService != value))
				{
					this.OnShippingServiceChanging(value);
					this.SendPropertyChanging();
					this._ShippingService = value;
					this.SendPropertyChanged("ShippingService");
					this.OnShippingServiceChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingAmount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal ShippingAmount
		{
			get
			{
				return this._ShippingAmount;
			}
			set
			{
				if ((this._ShippingAmount != value))
				{
					this.OnShippingAmountChanging(value);
					this.SendPropertyChanging();
					this._ShippingAmount = value;
					this.SendPropertyChanged("ShippingAmount");
					this.OnShippingAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountReason", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string DiscountReason
		{
			get
			{
				return this._DiscountReason;
			}
			set
			{
				if ((this._DiscountReason != value))
				{
					this.OnDiscountReasonChanging(value);
					this.SendPropertyChanging();
					this._DiscountReason = value;
					this.SendPropertyChanged("DiscountReason");
					this.OnDiscountReasonChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingAddressID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ShippingAddressID
		{
			get
			{
				return this._ShippingAddressID;
			}
			set
			{
				if ((this._ShippingAddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingAddressIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingAddressID = value;
					this.SendPropertyChanged("ShippingAddressID");
					this.OnShippingAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAddressID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BillingAddressID
		{
			get
			{
				return this._BillingAddressID;
			}
			set
			{
				if ((this._BillingAddressID != value))
				{
					if (this._Address1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingAddressIDChanging(value);
					this.SendPropertyChanging();
					this._BillingAddressID = value;
					this.SendPropertyChanged("BillingAddressID");
					this.OnBillingAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateShipped", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateShipped
		{
			get
			{
				return this._DateShipped;
			}
			set
			{
				if ((this._DateShipped != value))
				{
					this.OnDateShippedChanging(value);
					this.SendPropertyChanging();
					this._DateShipped = value;
					this.SendPropertyChanged("DateShipped");
					this.OnDateShippedChanged();
				}
			}
		}
		
		[Column(Storage="_TrackingNumber", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string TrackingNumber
		{
			get
			{
				return this._TrackingNumber;
			}
			set
			{
				if ((this._TrackingNumber != value))
				{
					this.OnTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackingNumber = value;
					this.SendPropertyChanged("TrackingNumber");
					this.OnTrackingNumberChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDelivery", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EstimatedDelivery
		{
			get
			{
				return this._EstimatedDelivery;
			}
			set
			{
				if ((this._EstimatedDelivery != value))
				{
					this.OnEstimatedDeliveryChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDelivery = value;
					this.SendPropertyChanged("EstimatedDelivery");
					this.OnEstimatedDeliveryChanged();
				}
			}
		}
		
		[Column(Storage="_SubTotal", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal SubTotal
		{
			get
			{
				return this._SubTotal;
			}
			set
			{
				if ((this._SubTotal != value))
				{
					this.OnSubTotalChanging(value);
					this.SendPropertyChanging();
					this._SubTotal = value;
					this.SendPropertyChanged("SubTotal");
					this.OnSubTotalChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ExecutedOn", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ExecutedOn
		{
			get
			{
				return this._ExecutedOn;
			}
			set
			{
				if ((this._ExecutedOn != value))
				{
					this.OnExecutedOnChanging(value);
					this.SendPropertyChanging();
					this._ExecutedOn = value;
					this.SendPropertyChanged("ExecutedOn");
					this.OnExecutedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Order_Transaction", Storage="_Transactions", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[Association(Name="Order_OrderItem", Storage="_OrderItems", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[Association(Name="Address_Order", Storage="_Address", ThisKey="ShippingAddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ShippingAddressID = value.AddressID;
					}
					else
					{
						this._ShippingAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Address_Order1", Storage="_Address1", ThisKey="BillingAddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address1
		{
			get
			{
				return this._Address1.Entity;
			}
			set
			{
				Address previousValue = this._Address1.Entity;
				if (((previousValue != value) 
							|| (this._Address1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._Address1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._BillingAddressID = value.AddressID;
					}
					else
					{
						this._BillingAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address1");
				}
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Customer", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="OrderStatusID", OtherKey="OrderStatusID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusID = value.OrderStatusID;
					}
					else
					{
						this._OrderStatusID = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusID;
		
		private string _Description;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_OrderStatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_Orders", ThisKey="OrderStatusID", OtherKey="OrderStatusID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[Table(Name="dbo.ProductDescriptors")]
	public partial class ProductDescriptor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DescriptorID;
		
		private string _SKU;
		
		private string _LanguageCode;
		
		private string _Title;
		
		private bool _IsDefault;
		
		private string _Body;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptorIDChanging(int value);
    partial void OnDescriptorIDChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public ProductDescriptor()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_DescriptorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DescriptorID
		{
			get
			{
				return this._DescriptorID;
			}
			set
			{
				if ((this._DescriptorID != value))
				{
					this.OnDescriptorIDChanging(value);
					this.SendPropertyChanging();
					this._DescriptorID = value;
					this.SendPropertyChanged("DescriptorID");
					this.OnDescriptorIDChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(2500) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductDescriptor", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductDescriptors.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductDescriptors.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductImages")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductImageID;
		
		private string _SKU;
		
		private string _ThumbUrl;
		
		private string _FullImageUrl;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductImageIDChanging(int value);
    partial void OnProductImageIDChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnThumbUrlChanging(string value);
    partial void OnThumbUrlChanged();
    partial void OnFullImageUrlChanging(string value);
    partial void OnFullImageUrlChanged();
    #endregion
		
		public ProductImage()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductImageID
		{
			get
			{
				return this._ProductImageID;
			}
			set
			{
				if ((this._ProductImageID != value))
				{
					this.OnProductImageIDChanging(value);
					this.SendPropertyChanging();
					this._ProductImageID = value;
					this.SendPropertyChanged("ProductImageID");
					this.OnProductImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbUrl", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ThumbUrl
		{
			get
			{
				return this._ThumbUrl;
			}
			set
			{
				if ((this._ThumbUrl != value))
				{
					this.OnThumbUrlChanging(value);
					this.SendPropertyChanging();
					this._ThumbUrl = value;
					this.SendPropertyChanged("ThumbUrl");
					this.OnThumbUrlChanged();
				}
			}
		}
		
		[Column(Storage="_FullImageUrl", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FullImageUrl
		{
			get
			{
				return this._FullImageUrl;
			}
			set
			{
				if ((this._FullImageUrl != value))
				{
					this.OnFullImageUrlChanging(value);
					this.SendPropertyChanging();
					this._FullImageUrl = value;
					this.SendPropertyChanged("FullImageUrl");
					this.OnFullImageUrlChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SKU;
		
		private System.Guid _SiteID;
		
		private int _DeliveryMethodID;
		
		private string _ProductName;
		
		private decimal _BasePrice;
		
		private decimal _WeightInPounds;
		
		private System.DateTime _DateAvailable;
		
		private int _InventoryStatusID;
		
		private string _EstimatedDelivery;
		
		private bool _AllowBackOrder;
		
		private bool _IsTaxable;
		
		private string _DefaultImageFile;
		
		private System.Data.Linq.Binary _Version;
		
		private int _AmountOnHand;
		
		private bool _AllowPreOrder;
		
		private System.Data.Linq.Binary _Options;
		
		private EntitySet<CartItem> _CartItems;
		
		private EntitySet<Categories_Product> _Categories_Products;
		
		private EntitySet<InventoryRecord> _InventoryRecords;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<ProductDescriptor> _ProductDescriptors;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntitySet<Products_CrossSell> _Products_CrossSells;
		
		private EntitySet<Products_CrossSell> _Products_CrossSells1;
		
		private EntitySet<Products_Related> _Products_Relateds;
		
		private EntitySet<Products_Related> _Products_Relateds1;
		
		private EntityRef<DeliveryMethod> _DeliveryMethod;
		
		private EntityRef<InventoryStatus> _InventoryStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnSiteIDChanging(System.Guid value);
    partial void OnSiteIDChanged();
    partial void OnDeliveryMethodIDChanging(int value);
    partial void OnDeliveryMethodIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnBasePriceChanging(decimal value);
    partial void OnBasePriceChanged();
    partial void OnWeightInPoundsChanging(decimal value);
    partial void OnWeightInPoundsChanged();
    partial void OnDateAvailableChanging(System.DateTime value);
    partial void OnDateAvailableChanged();
    partial void OnInventoryStatusIDChanging(int value);
    partial void OnInventoryStatusIDChanged();
    partial void OnEstimatedDeliveryChanging(string value);
    partial void OnEstimatedDeliveryChanged();
    partial void OnAllowBackOrderChanging(bool value);
    partial void OnAllowBackOrderChanged();
    partial void OnIsTaxableChanging(bool value);
    partial void OnIsTaxableChanged();
    partial void OnDefaultImageFileChanging(string value);
    partial void OnDefaultImageFileChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnAmountOnHandChanging(int value);
    partial void OnAmountOnHandChanged();
    partial void OnAllowPreOrderChanging(bool value);
    partial void OnAllowPreOrderChanged();
    partial void OnOptionsChanging(System.Data.Linq.Binary value);
    partial void OnOptionsChanged();
    #endregion
		
		public Product()
		{
			this._CartItems = new EntitySet<CartItem>(new Action<CartItem>(this.attach_CartItems), new Action<CartItem>(this.detach_CartItems));
			this._Categories_Products = new EntitySet<Categories_Product>(new Action<Categories_Product>(this.attach_Categories_Products), new Action<Categories_Product>(this.detach_Categories_Products));
			this._InventoryRecords = new EntitySet<InventoryRecord>(new Action<InventoryRecord>(this.attach_InventoryRecords), new Action<InventoryRecord>(this.detach_InventoryRecords));
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._ProductDescriptors = new EntitySet<ProductDescriptor>(new Action<ProductDescriptor>(this.attach_ProductDescriptors), new Action<ProductDescriptor>(this.detach_ProductDescriptors));
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._Products_CrossSells = new EntitySet<Products_CrossSell>(new Action<Products_CrossSell>(this.attach_Products_CrossSells), new Action<Products_CrossSell>(this.detach_Products_CrossSells));
			this._Products_CrossSells1 = new EntitySet<Products_CrossSell>(new Action<Products_CrossSell>(this.attach_Products_CrossSells1), new Action<Products_CrossSell>(this.detach_Products_CrossSells1));
			this._Products_Relateds = new EntitySet<Products_Related>(new Action<Products_Related>(this.attach_Products_Relateds), new Action<Products_Related>(this.detach_Products_Relateds));
			this._Products_Relateds1 = new EntitySet<Products_Related>(new Action<Products_Related>(this.attach_Products_Relateds1), new Action<Products_Related>(this.detach_Products_Relateds1));
			this._DeliveryMethod = default(EntityRef<DeliveryMethod>);
			this._InventoryStatus = default(EntityRef<InventoryStatus>);
			OnCreated();
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryMethodID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DeliveryMethodID
		{
			get
			{
				return this._DeliveryMethodID;
			}
			set
			{
				if ((this._DeliveryMethodID != value))
				{
					if (this._DeliveryMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryMethodIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryMethodID = value;
					this.SendPropertyChanged("DeliveryMethodID");
					this.OnDeliveryMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Decimal(18,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_WeightInPounds", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal WeightInPounds
		{
			get
			{
				return this._WeightInPounds;
			}
			set
			{
				if ((this._WeightInPounds != value))
				{
					this.OnWeightInPoundsChanging(value);
					this.SendPropertyChanging();
					this._WeightInPounds = value;
					this.SendPropertyChanged("WeightInPounds");
					this.OnWeightInPoundsChanged();
				}
			}
		}
		
		[Column(Storage="_DateAvailable", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateAvailable
		{
			get
			{
				return this._DateAvailable;
			}
			set
			{
				if ((this._DateAvailable != value))
				{
					this.OnDateAvailableChanging(value);
					this.SendPropertyChanging();
					this._DateAvailable = value;
					this.SendPropertyChanged("DateAvailable");
					this.OnDateAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_InventoryStatusID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InventoryStatusID
		{
			get
			{
				return this._InventoryStatusID;
			}
			set
			{
				if ((this._InventoryStatusID != value))
				{
					if (this._InventoryStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryStatusIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryStatusID = value;
					this.SendPropertyChanged("InventoryStatusID");
					this.OnInventoryStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDelivery", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EstimatedDelivery
		{
			get
			{
				return this._EstimatedDelivery;
			}
			set
			{
				if ((this._EstimatedDelivery != value))
				{
					this.OnEstimatedDeliveryChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDelivery = value;
					this.SendPropertyChanged("EstimatedDelivery");
					this.OnEstimatedDeliveryChanged();
				}
			}
		}
		
		[Column(Storage="_AllowBackOrder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool AllowBackOrder
		{
			get
			{
				return this._AllowBackOrder;
			}
			set
			{
				if ((this._AllowBackOrder != value))
				{
					this.OnAllowBackOrderChanging(value);
					this.SendPropertyChanging();
					this._AllowBackOrder = value;
					this.SendPropertyChanged("AllowBackOrder");
					this.OnAllowBackOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsTaxable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTaxable
		{
			get
			{
				return this._IsTaxable;
			}
			set
			{
				if ((this._IsTaxable != value))
				{
					this.OnIsTaxableChanging(value);
					this.SendPropertyChanging();
					this._IsTaxable = value;
					this.SendPropertyChanged("IsTaxable");
					this.OnIsTaxableChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultImageFile", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultImageFile
		{
			get
			{
				return this._DefaultImageFile;
			}
			set
			{
				if ((this._DefaultImageFile != value))
				{
					this.OnDefaultImageFileChanging(value);
					this.SendPropertyChanging();
					this._DefaultImageFile = value;
					this.SendPropertyChanged("DefaultImageFile");
					this.OnDefaultImageFileChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_AmountOnHand", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AmountOnHand
		{
			get
			{
				return this._AmountOnHand;
			}
			set
			{
				if ((this._AmountOnHand != value))
				{
					this.OnAmountOnHandChanging(value);
					this.SendPropertyChanging();
					this._AmountOnHand = value;
					this.SendPropertyChanged("AmountOnHand");
					this.OnAmountOnHandChanged();
				}
			}
		}
		
		[Column(Storage="_AllowPreOrder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool AllowPreOrder
		{
			get
			{
				return this._AllowPreOrder;
			}
			set
			{
				if ((this._AllowPreOrder != value))
				{
					this.OnAllowPreOrderChanging(value);
					this.SendPropertyChanging();
					this._AllowPreOrder = value;
					this.SendPropertyChanged("AllowPreOrder");
					this.OnAllowPreOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Options", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				if ((this._Options != value))
				{
					this.OnOptionsChanging(value);
					this.SendPropertyChanging();
					this._Options = value;
					this.SendPropertyChanged("Options");
					this.OnOptionsChanged();
				}
			}
		}
		
		[Association(Name="Product_CartItem", Storage="_CartItems", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<CartItem> CartItems
		{
			get
			{
				return this._CartItems;
			}
			set
			{
				this._CartItems.Assign(value);
			}
		}
		
		[Association(Name="Product_Categories_Product", Storage="_Categories_Products", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<Categories_Product> Categories_Products
		{
			get
			{
				return this._Categories_Products;
			}
			set
			{
				this._Categories_Products.Assign(value);
			}
		}
		
		[Association(Name="Product_InventoryRecord", Storage="_InventoryRecords", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<InventoryRecord> InventoryRecords
		{
			get
			{
				return this._InventoryRecords;
			}
			set
			{
				this._InventoryRecords.Assign(value);
			}
		}
		
		[Association(Name="Product_OrderItem", Storage="_OrderItems", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductDescriptor", Storage="_ProductDescriptors", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<ProductDescriptor> ProductDescriptors
		{
			get
			{
				return this._ProductDescriptors;
			}
			set
			{
				this._ProductDescriptors.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_ProductImages", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[Association(Name="Product_Products_CrossSell", Storage="_Products_CrossSells", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<Products_CrossSell> Products_CrossSells
		{
			get
			{
				return this._Products_CrossSells;
			}
			set
			{
				this._Products_CrossSells.Assign(value);
			}
		}
		
		[Association(Name="Product_Products_CrossSell1", Storage="_Products_CrossSells1", ThisKey="SKU", OtherKey="CrossSKU")]
		public EntitySet<Products_CrossSell> Products_CrossSells1
		{
			get
			{
				return this._Products_CrossSells1;
			}
			set
			{
				this._Products_CrossSells1.Assign(value);
			}
		}
		
		[Association(Name="Product_Products_Related", Storage="_Products_Relateds", ThisKey="SKU", OtherKey="SKU")]
		public EntitySet<Products_Related> Products_Relateds
		{
			get
			{
				return this._Products_Relateds;
			}
			set
			{
				this._Products_Relateds.Assign(value);
			}
		}
		
		[Association(Name="Product_Products_Related1", Storage="_Products_Relateds1", ThisKey="SKU", OtherKey="RelatedSKU")]
		public EntitySet<Products_Related> Products_Relateds1
		{
			get
			{
				return this._Products_Relateds1;
			}
			set
			{
				this._Products_Relateds1.Assign(value);
			}
		}
		
		[Association(Name="DeliveryMethod_Product", Storage="_DeliveryMethod", ThisKey="DeliveryMethodID", OtherKey="DeliveryMethodID", IsForeignKey=true)]
		public DeliveryMethod DeliveryMethod
		{
			get
			{
				return this._DeliveryMethod.Entity;
			}
			set
			{
				DeliveryMethod previousValue = this._DeliveryMethod.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryMethod.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._DeliveryMethod.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._DeliveryMethodID = value.DeliveryMethodID;
					}
					else
					{
						this._DeliveryMethodID = default(int);
					}
					this.SendPropertyChanged("DeliveryMethod");
				}
			}
		}
		
		[Association(Name="InventoryStatus_Product", Storage="_InventoryStatus", ThisKey="InventoryStatusID", OtherKey="InventoryStatusID", IsForeignKey=true)]
		public InventoryStatus InventoryStatus
		{
			get
			{
				return this._InventoryStatus.Entity;
			}
			set
			{
				InventoryStatus previousValue = this._InventoryStatus.Entity;
				if (((previousValue != value) 
							|| (this._InventoryStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryStatus.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._InventoryStatus.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._InventoryStatusID = value.InventoryStatusID;
					}
					else
					{
						this._InventoryStatusID = default(int);
					}
					this.SendPropertyChanged("InventoryStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CartItems(CartItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CartItems(CartItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_InventoryRecords(InventoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InventoryRecords(InventoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductDescriptors(ProductDescriptor entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductDescriptors(ProductDescriptor entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Products_CrossSells(Products_CrossSell entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Products_CrossSells(Products_CrossSell entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Products_CrossSells1(Products_CrossSell entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_Products_CrossSells1(Products_CrossSell entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
		
		private void attach_Products_Relateds(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Products_Relateds(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Products_Relateds1(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_Products_Relateds1(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
	}
	
	[Table(Name="dbo.Products_CrossSell")]
	public partial class Products_CrossSell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SKU;
		
		private string _CrossSKU;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Product> _Product1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnCrossSKUChanging(string value);
    partial void OnCrossSKUChanged();
    #endregion
		
		public Products_CrossSell()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_CrossSKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CrossSKU
		{
			get
			{
				return this._CrossSKU;
			}
			set
			{
				if ((this._CrossSKU != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrossSKUChanging(value);
					this.SendPropertyChanging();
					this._CrossSKU = value;
					this.SendPropertyChanged("CrossSKU");
					this.OnCrossSKUChanged();
				}
			}
		}
		
		[Association(Name="Product_Products_CrossSell", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Products_CrossSells.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Products_CrossSells.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Product_Products_CrossSell1", Storage="_Product1", ThisKey="CrossSKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.Products_CrossSells1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.Products_CrossSells1.Add(this);
						this._CrossSKU = value.SKU;
					}
					else
					{
						this._CrossSKU = default(string);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Products_Related")]
	public partial class Products_Related : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SKU;
		
		private string _RelatedSKU;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Product> _Product1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnRelatedSKUChanging(string value);
    partial void OnRelatedSKUChanged();
    #endregion
		
		public Products_Related()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedSKU", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RelatedSKU
		{
			get
			{
				return this._RelatedSKU;
			}
			set
			{
				if ((this._RelatedSKU != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedSKUChanging(value);
					this.SendPropertyChanging();
					this._RelatedSKU = value;
					this.SendPropertyChanged("RelatedSKU");
					this.OnRelatedSKUChanged();
				}
			}
		}
		
		[Association(Name="Product_Products_Related", Storage="_Product", ThisKey="SKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Products_Relateds.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Products_Relateds.Add(this);
						this._SKU = value.SKU;
					}
					else
					{
						this._SKU = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Product_Products_Related1", Storage="_Product1", ThisKey="RelatedSKU", OtherKey="SKU", IsForeignKey=true)]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.Products_Relateds1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.Products_Relateds1.Add(this);
						this._RelatedSKU = value.SKU;
					}
					else
					{
						this._RelatedSKU = default(string);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ShippingMethods")]
	public partial class ShippingMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShippingMethodID;
		
		private string _Carrier;
		
		private string _ServiceName;
		
		private decimal _RatePerPound;
		
		private decimal _BaseRate;
		
		private string _EstimatedDelivery;
		
		private int _DaysToDeliver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShippingMethodIDChanging(int value);
    partial void OnShippingMethodIDChanged();
    partial void OnCarrierChanging(string value);
    partial void OnCarrierChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnRatePerPoundChanging(decimal value);
    partial void OnRatePerPoundChanged();
    partial void OnBaseRateChanging(decimal value);
    partial void OnBaseRateChanged();
    partial void OnEstimatedDeliveryChanging(string value);
    partial void OnEstimatedDeliveryChanged();
    partial void OnDaysToDeliverChanging(int value);
    partial void OnDaysToDeliverChanged();
    #endregion
		
		public ShippingMethod()
		{
			OnCreated();
		}
		
		[Column(Storage="_ShippingMethodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShippingMethodID
		{
			get
			{
				return this._ShippingMethodID;
			}
			set
			{
				if ((this._ShippingMethodID != value))
				{
					this.OnShippingMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingMethodID = value;
					this.SendPropertyChanged("ShippingMethodID");
					this.OnShippingMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Carrier", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Carrier
		{
			get
			{
				return this._Carrier;
			}
			set
			{
				if ((this._Carrier != value))
				{
					this.OnCarrierChanging(value);
					this.SendPropertyChanging();
					this._Carrier = value;
					this.SendPropertyChanged("Carrier");
					this.OnCarrierChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[Column(Storage="_RatePerPound", DbType="Decimal(18,0) NOT NULL")]
		public decimal RatePerPound
		{
			get
			{
				return this._RatePerPound;
			}
			set
			{
				if ((this._RatePerPound != value))
				{
					this.OnRatePerPoundChanging(value);
					this.SendPropertyChanging();
					this._RatePerPound = value;
					this.SendPropertyChanged("RatePerPound");
					this.OnRatePerPoundChanged();
				}
			}
		}
		
		[Column(Storage="_BaseRate", DbType="Decimal(18,0) NOT NULL")]
		public decimal BaseRate
		{
			get
			{
				return this._BaseRate;
			}
			set
			{
				if ((this._BaseRate != value))
				{
					this.OnBaseRateChanging(value);
					this.SendPropertyChanging();
					this._BaseRate = value;
					this.SendPropertyChanged("BaseRate");
					this.OnBaseRateChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDelivery", DbType="NVarChar(50)")]
		public string EstimatedDelivery
		{
			get
			{
				return this._EstimatedDelivery;
			}
			set
			{
				if ((this._EstimatedDelivery != value))
				{
					this.OnEstimatedDeliveryChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDelivery = value;
					this.SendPropertyChanged("EstimatedDelivery");
					this.OnEstimatedDeliveryChanged();
				}
			}
		}
		
		[Column(Storage="_DaysToDeliver", DbType="Int NOT NULL")]
		public int DaysToDeliver
		{
			get
			{
				return this._DaysToDeliver;
			}
			set
			{
				if ((this._DaysToDeliver != value))
				{
					this.OnDaysToDeliverChanging(value);
					this.SendPropertyChanging();
					this._DaysToDeliver = value;
					this.SendPropertyChanged("DaysToDeliver");
					this.OnDaysToDeliverChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TaxRates")]
	public partial class TaxRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxRateID;
		
		private decimal _Rate;
		
		private string _Region;
		
		private string _Country;
		
		private string _PostalCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxRateIDChanging(int value);
    partial void OnTaxRateIDChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    #endregion
		
		public TaxRate()
		{
			OnCreated();
		}
		
		[Column(Storage="_TaxRateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaxRateID
		{
			get
			{
				return this._TaxRateID;
			}
			set
			{
				if ((this._TaxRateID != value))
				{
					this.OnTaxRateIDChanging(value);
					this.SendPropertyChanging();
					this._TaxRateID = value;
					this.SendPropertyChanged("TaxRateID");
					this.OnTaxRateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Money NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[Column(Storage="_Region", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="NVarChar(50)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
